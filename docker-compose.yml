version: '3.8'

services:
  # Serwer Ollama z lokalnym LLM
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Testowy serwer email (MailHog)
  mailserver:
    image: mailhog/mailhog:latest
    container_name: mailserver
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - app-network
    restart: unless-stopped
    # Na produkcji zastąpić rzeczywistym serwerem

  # Aplikacja Camel z Groovy integrująca email z LLM
  camel-groovy:
    build:
      context: ./camel-groovy
      dockerfile: Dockerfile
    container_name: camel-groovy-email-llm
    ports:
      - "${SERVER_PORT:-8080}:8080"
    depends_on:
      - ollama
      - mailserver
    env_file:
      - .env
    volumes:
      - ./data:/data
      - ./camel-groovy/routes:/app/routes
      - ./logs:/logs
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Narzędzie administracyjne dla bazy SQLite
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_DRIVER=sqlite
    volumes:
      - ./data:/data:ro
    restart: unless-stopped
    networks:
      - app-network

volumes:
  ollama_models:

networks:
  app-network:
    driver: bridge
