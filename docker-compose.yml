version: '3.8'

services:
  # Serwer Ollama z lokalnym LLM
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "${OLLAMA_EXTERNAL_PORT:-11435}:11434"
    volumes:
      - ${OLLAMA_MODELS_DIR:-./ollama_models}:/root/.ollama
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 2G

  # Testowy serwer email (MailHog)
  mailserver:
    image: mailhog/mailhog:latest
    container_name: mailserver
    ports:
      - "${MAILHOG_SMTP_PORT:-1026}:1025"  # SMTP port
      - "${MAILHOG_UI_PORT:-8026}:8025"    # Web UI port
    networks:
      - app-network
    restart: unless-stopped
    # Jeśli ustawiono dane logowania, użyj MailHog z uwierzytelnianiem
    environment:
      - MH_AUTH_FILE=${MAILHOG_AUTH_FILE:-}

  # Aplikacja Camel z Groovy integrująca email z LLM
  camel-groovy:
    build:
      context: ./camel-groovy
      dockerfile: Dockerfile
      args:
        # Dodanie argumentów do cache
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true"
        DEPS_CHECKSUM: "${DEPS_CHECKSUM:-0}"  # Zmień tylko gdy zmienisz zależności
    container_name: camel-groovy-email-llm
    ports:
      - "${SERVER_PORT:-8083}:8080"
    depends_on:
      - ollama
      - mailserver
    env_file:
      - .env
    environment:
      - JAVA_OPTS=-Xmx${CAMEL_MAX_HEAP:-1024m} -Xms${CAMEL_MIN_HEAP:-512m} -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-dev}
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama}
      - OLLAMA_PORT=${OLLAMA_PORT:-11434}
      - SQLITE_DB_PATH=${SQLITE_DB_PATH:-/data/emails.db}
      - SERVER_PORT=8080  # Wewnętrzny port w kontenerze zawsze 8080
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ${DATA_DIR:-./data}:/data
      - ./camel-groovy/routes:/app/routes
      - ${LOGS_DIR:-./logs}:/logs
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Narzędzie administracyjne dla bazy SQLite
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=/data/emails.db
      - ADMINER_DEFAULT_DRIVER=sqlite
      - ADMINER_DESIGN=flat
      - ADMINER_PLUGINS=tables-filter tinymce
      # Uwaga: Adminer dla SQLite nie wymaga uwierzytelniania,
      # ponieważ SQLite jest plikiem, a nie serwerem bazy danych.
      # Poniższe zmienne są używane tylko dla informacji
      - ADMINER_USERNAME=${ADMINER_USERNAME:-admin}
      - ADMINER_PASSWORD=${ADMINER_PASSWORD:-email_llm_admin}
    volumes:
      - ${DATA_DIR:-./data}:/data:ro
    restart: unless-stopped
    networks:
      - app-network

volumes:
  ollama_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${OLLAMA_MODELS_DIR:-./ollama_models}

networks:
  app-network:
    driver: bridge